// Code generated by go-bindata.
// sources:
// bbos.bin
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bbosBin = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x51\x6c\x14\x55\x17\xfe\xce\x6e\xff\x7f\xf7\x6f\xf9\xff\x92\xf6\xb7\x25\xb4\x91\xbb\x4b\x53\x35\xc6\x88\x0d\x21\xc1\x48\x9c\x6d\x6b\x1a\x24\x08\x94\x21\x98\x18\x93\xd9\x1d\xd6\x50\xad\xdd\x64\x5b\xcc\x42\x2e\x7b\xf7\xc6\x29\xbb\x76\x6b\x68\x90\x44\x1f\x30\x38\x40\xc4\x68\x62\x22\x0f\x7d\x30\x86\x64\x8a\xc6\xa0\x89\x9a\x8a\x7d\xe0\x41\xb2\x3e\xf0\xa0\x91\xcc\xdc\x55\x5c\x78\x60\xcd\xdd\xa5\x2c\xbc\x39\x0f\xe7\xce\x39\xf7\xfb\xce\xb9\xe7\x9c\x7b\x2e\xf7\xb0\x86\x57\x7c\x70\x0a\xef\x2e\x85\xb7\xde\x71\xba\x4f\x4b\x21\x7d\x14\x93\x47\x0d\x7f\x3f\x67\xc1\xef\x9c\xa9\x1e\xce\x82\xeb\x9c\x05\xd7\x8a\xcb\xd5\x76\x21\xfd\x31\x27\xc6\x89\x85\x8b\x54\xa4\x08\x1d\xc5\xd8\x88\x45\xc7\x53\xa5\x6e\x21\xfd\x98\x58\xde\xf7\x31\xd5\x85\xf4\xf7\x94\xe2\xb9\x2d\x0d\xf4\x5a\x41\xd5\x01\x4e\x6b\xdb\xca\x0d\xec\xf1\x14\xa7\x4d\x28\xde\xe5\x39\x5d\x42\xfa\xbb\xf4\xae\xa0\xea\x7f\x8f\xb7\x10\xd4\x44\x97\x53\x42\xfa\x9d\x82\xaa\xcf\xdc\xef\x41\x73\xda\xa8\x98\x2c\xca\x30\x71\x1a\x1b\xe5\xdd\x63\x23\xbc\x7b\x6c\x74\xd6\xea\xa5\x49\x77\xe1\x4c\x98\x22\xd4\x41\x9d\xb4\x81\xcc\x4a\xfd\x8e\xa3\x38\xf3\xdf\xea\x4f\xf2\x57\x7d\xf0\x5f\x3b\xeb\x3c\xbb\x16\x9c\xf9\xa7\x78\x96\x81\xb3\xe0\x4d\x9e\xdd\xa4\xd7\xb3\x3c\x6b\xe8\xd5\xb3\x2a\x56\xd2\x4a\x58\x31\x8b\x2c\x97\x77\x8d\x8d\xcc\x5a\x16\xd9\x52\x78\x04\x55\x15\xde\x8d\x82\xfa\x43\x78\xd5\xdd\xea\x4f\xe1\xf9\xfb\xd5\x4d\xe1\xf9\xa6\xfa\x2b\xef\xaa\x2a\x60\x4b\x47\x09\xe9\x2f\x8a\xe5\x7a\x5d\xdd\xb2\x65\x49\x6b\x17\xe7\xb5\xbc\xbc\xa0\xe5\xca\x49\x2d\x7f\x7b\x4f\x09\x19\x6c\x3e\xa5\xe5\xb3\xb6\x9c\x73\x81\x26\xe3\x98\xab\x7d\x98\x04\xf0\x36\x30\x33\x04\xe2\x3d\x54\x08\x7b\xaa\x66\xcb\x1c\xa9\x5a\xc8\x05\xe5\x3f\x02\x03\x85\x5c\x20\xff\x21\x98\xc6\x73\xba\x51\xc8\x85\x54\x2d\xff\x59\x1d\xa0\xfc\x27\x3e\x40\xfb\x08\x34\x77\x01\x10\x2b\x24\x54\xad\xbc\xa4\x6a\x42\x06\x5b\x4d\x02\x71\xa6\x2e\xf3\x04\x15\x72\x23\xaa\x86\xd8\x31\x8d\x91\x01\x9c\xae\x52\x9c\xc7\xb1\x81\x0f\x82\xf1\x01\xb0\xe8\x16\x21\x83\xff\xe5\x92\xaa\xc6\x0f\x82\xad\x89\x6b\x7b\x44\x73\x0f\x96\x53\xb9\x84\xaa\x45\x63\x88\xdf\xe5\xf6\xdf\xcf\xe3\x9b\x49\xf0\x18\x89\x88\xa7\x6a\xfa\x5c\xd1\x90\x19\x03\xcd\x0e\xe9\xe8\x03\x09\xbe\xa7\x0e\xbe\xc3\xc7\x7f\xa8\x14\x2f\x85\x84\x0c\x1e\xd9\xaf\x73\x6d\x78\x75\x88\xc7\x6e\x14\x8e\x18\xba\x6e\x8b\x3a\x3b\x57\xe7\x69\xcb\x60\x7b\x30\x1e\xbc\x14\x4c\x38\x34\x68\x9c\x7b\x92\x3f\x8f\x7a\xf4\xf1\x7f\xaf\xd6\x89\xf2\x14\x02\x90\xa7\x7f\x7d\xa0\xb1\x9d\xd4\x4d\x11\x32\x93\x08\x99\x12\x34\x4f\x83\x86\x15\xb3\xa4\x95\x14\x32\x38\xf4\xe0\xde\xc2\xbd\x3d\x87\x22\x34\x68\xb4\x91\x15\x5b\xe8\xd2\x38\xdd\x03\x67\x7c\xce\x5d\xed\x66\x70\xda\x8c\x01\xcd\xbb\x1c\xbc\x6d\xcb\xf9\x01\x1e\x57\xb7\x47\x13\xa0\x92\xda\x21\x81\x79\x2d\x69\x41\xcb\xd0\x49\x2d\xc3\xb6\x3c\xe2\x56\xdb\xef\xf1\x3f\xd5\xbd\xad\x76\x34\x6f\x43\xb0\x68\x4b\x1d\x41\xfc\xa8\x6d\xcd\x28\x25\x3a\x62\x54\x3b\x9c\xf1\xb9\x66\x3d\x17\xdb\x1b\xd6\x63\xf7\x49\x7d\xf6\x5e\x82\x77\xf2\xfb\xb6\x6f\x7b\x50\x3a\xcb\x2f\xd4\xeb\x42\x06\x57\x7b\xd8\xb9\x27\xd6\xe9\xda\x5e\x15\x32\xf8\xee\xff\x64\xb9\x3a\x23\x5b\x7e\x41\x4e\x8c\xb3\xe0\xeb\xb0\x57\x5d\x63\xcb\x85\x96\xd6\x61\x4b\x41\x37\x1f\x12\x34\xbd\x5d\xd0\xba\x90\xa0\xf2\x16\x41\xfd\x93\x9c\xa9\xf7\x6d\x4f\xdd\x7a\x37\xb5\x7a\x73\x5b\xdd\x68\xce\xa6\x5a\x6e\x4d\x6f\x43\xbf\xbe\xaa\xdb\xb2\x75\x22\xf5\x54\x0f\xe3\x4c\x0d\xe9\xbc\x55\x6f\xce\xab\xb6\x97\x97\xaa\xed\xf3\x5f\xf2\x25\x75\xbb\xc7\x03\x1e\xf6\x40\xe7\x57\x74\x25\x55\xaf\x2d\x9d\x0a\xef\x1a\xf8\x8a\x0f\xed\xfa\x89\x57\x82\xe7\x6c\xa9\x67\x77\xfe\x4c\x1f\x6d\xa0\x0e\x32\x3d\x84\xcc\x0a\xc8\x4c\xe8\x6e\x08\xa9\xec\xfe\x15\x21\xd5\x9e\xfe\x2b\x42\xaa\x17\xb5\xbe\x6e\x38\xba\xac\xd7\x6d\x3f\x0b\xa9\xc6\xfb\xa8\x34\x12\x5d\x8a\xfe\x62\x25\xb6\x5d\x6b\xda\x85\x54\x2f\x5b\x09\xab\x62\x79\x96\xbb\xea\xbb\xf9\x2e\xf4\x35\x72\xd3\x9e\xf9\x28\x58\xc7\x25\x55\x13\x57\xf4\x94\x14\x3d\x55\x8b\x7a\x6d\x4b\x11\xea\x23\x41\x54\xe8\xd8\xc8\x99\x7a\xfa\x9d\x14\x8f\x53\x21\x42\xd1\x8d\x56\x22\x3a\x24\xa4\x3a\x31\x1b\x2b\xc5\x85\x54\xe5\x56\x8d\x2c\x6f\xf5\xbd\x78\x30\x52\x37\x75\x52\x1f\xad\x47\xe9\xd2\x7a\x66\x76\xa1\xcd\x1c\x42\xd8\x1c\x47\xc8\xcc\x82\xcc\x13\xba\xdb\xea\x73\x47\x9f\xf6\xa2\x90\xea\xfc\x7a\xb7\x61\xf1\xf2\x6e\xbd\x0e\x58\x9e\x95\xb4\x64\xcb\x6f\x98\x66\xbb\x84\x54\x3f\xe8\xb9\x51\xdf\x58\x61\x5b\x1a\xc3\x46\xd2\xc8\x1a\x69\x63\xd8\xc8\x18\x53\x46\xda\x98\x36\x98\xb1\xcb\xd8\x6b\x30\xe3\x51\x63\xd8\x18\x6e\xfc\x3f\x06\xb0\x9d\x6c\x27\x63\x6c\x2f\xcb\xb0\x49\x76\x88\xcd\xb0\x09\x96\x61\x53\x6c\x1a\x0f\x7c\x3a\xe6\x3f\xfa\x76\x23\x8b\x34\xa6\x31\x0d\x86\x24\xa6\x70\x18\x0c\xaf\x21\xdd\x58\x67\x90\x01\x6b\xec\xcf\x20\x8b\xc3\x00\x5e\x68\x58\x52\xc8\x20\x83\x19\x24\x91\xc2\x24\xd2\x60\x78\x1d\x69\x1c\xc0\x04\x92\x60\x78\x05\x19\x1c\xc2\x14\x0e\xdc\xc3\x1f\x40\x16\x13\x78\xa3\x11\x87\xc1\x46\x06\x53\x98\x42\x1a\x36\x66\x1a\x3c\xfc\x1d\x00\x00\xff\xff\x2b\x87\xc4\x0f\xb8\x06\x00\x00")

func bbosBinBytes() ([]byte, error) {
	return bindataRead(
		_bbosBin,
		"bbos.bin",
	)
}

func bbosBin() (*asset, error) {
	bytes, err := bbosBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bbos.bin", size: 1720, mode: os.FileMode(436), modTime: time.Unix(1485529242, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bbos.bin": bbosBin,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bbos.bin": &bintree{bbosBin, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
